//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RealityETH_v3_0
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x5b7dD1E86623548AF054A4985F7fc8Ccbb554E2c)
 */
export const realityEthV3_0Abi = [
  { type: 'constructor', inputs: [], stateMutability: 'nonpayable' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'question_id',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'answer_hash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'answer',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'nonce',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'bond',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LogAnswerReveal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'question_id',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'LogCancelArbitration',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'question_id',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LogClaim',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'question_id',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'answer',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'LogFinalize',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'question_id',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'bounty_added',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'bounty',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'LogFundAnswerBounty',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'question_id',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'min_bond',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LogMinimumBond',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'answer',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'question_id',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'history_hash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'bond',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'ts', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'is_commitment',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'LogNewAnswer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'question_id',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'template_id',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'question',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'content_hash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'arbitrator',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'timeout',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'opening_ts',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'nonce',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'created',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LogNewQuestion',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'template_id',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'question_text',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'LogNewTemplate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'question_id',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'LogNotifyOfArbitrationRequest',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'question_id',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'reopened_question_id',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'LogReopenQuestion',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'arbitrator',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LogSetQuestionFee',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LogWithdraw',
  },
  {
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'arbitrator_question_fees',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'template_id', internalType: 'uint256', type: 'uint256' },
      { name: 'question', internalType: 'string', type: 'string' },
      { name: 'arbitrator', internalType: 'address', type: 'address' },
      { name: 'timeout', internalType: 'uint32', type: 'uint32' },
      { name: 'opening_ts', internalType: 'uint32', type: 'uint32' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'askQuestion',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'template_id', internalType: 'uint256', type: 'uint256' },
      { name: 'question', internalType: 'string', type: 'string' },
      { name: 'arbitrator', internalType: 'address', type: 'address' },
      { name: 'timeout', internalType: 'uint32', type: 'uint32' },
      { name: 'opening_ts', internalType: 'uint32', type: 'uint32' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'min_bond', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'askQuestionWithMinBond',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'question_id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'answer', internalType: 'bytes32', type: 'bytes32' },
      { name: 'payee_if_wrong', internalType: 'address', type: 'address' },
      { name: 'last_history_hash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'last_answer_or_commitment_id',
        internalType: 'bytes32',
        type: 'bytes32',
      },
      { name: 'last_answerer', internalType: 'address', type: 'address' },
    ],
    name: 'assignWinnerAndSubmitAnswerByArbitrator',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'question_id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'cancelArbitration',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'question_ids', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'lengths', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'hist_hashes', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'addrs', internalType: 'address[]', type: 'address[]' },
      { name: 'bonds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'answers', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'claimMultipleAndWithdrawBalance',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'question_id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'history_hashes', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'addrs', internalType: 'address[]', type: 'address[]' },
      { name: 'bonds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'answers', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'claimWinnings',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'commitments',
    outputs: [
      { name: 'reveal_ts', internalType: 'uint32', type: 'uint32' },
      { name: 'is_revealed', internalType: 'bool', type: 'bool' },
      { name: 'revealed_answer', internalType: 'bytes32', type: 'bytes32' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'content', internalType: 'string', type: 'string' }],
    name: 'createTemplate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'content', internalType: 'string', type: 'string' },
      { name: 'question', internalType: 'string', type: 'string' },
      { name: 'arbitrator', internalType: 'address', type: 'address' },
      { name: 'timeout', internalType: 'uint32', type: 'uint32' },
      { name: 'opening_ts', internalType: 'uint32', type: 'uint32' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createTemplateAndAskQuestion',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [{ name: 'question_id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'fundAnswerBounty',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [{ name: 'question_id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getArbitrator',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'question_id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getBestAnswer',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'question_id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getBond',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'question_id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getBounty',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'question_id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getContentHash',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'question_id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFinalAnswer',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'question_id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'content_hash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'arbitrator', internalType: 'address', type: 'address' },
      { name: 'min_timeout', internalType: 'uint32', type: 'uint32' },
      { name: 'min_bond', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getFinalAnswerIfMatches',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'question_id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFinalizeTS',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'question_id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getHistoryHash',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'question_id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getMinBond',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'question_id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getOpeningTS',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'question_id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getTimeout',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'question_id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'question_id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'isPendingArbitration',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'question_id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'isSettledTooSoon',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'question_id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'requester', internalType: 'address', type: 'address' },
      { name: 'max_previous', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'notifyOfArbitrationRequest',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'question_claims',
    outputs: [
      { name: 'payee', internalType: 'address', type: 'address' },
      { name: 'last_bond', internalType: 'uint256', type: 'uint256' },
      { name: 'queued_funds', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'questions',
    outputs: [
      { name: 'content_hash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'arbitrator', internalType: 'address', type: 'address' },
      { name: 'opening_ts', internalType: 'uint32', type: 'uint32' },
      { name: 'timeout', internalType: 'uint32', type: 'uint32' },
      { name: 'finalize_ts', internalType: 'uint32', type: 'uint32' },
      { name: 'is_pending_arbitration', internalType: 'bool', type: 'bool' },
      { name: 'bounty', internalType: 'uint256', type: 'uint256' },
      { name: 'best_answer', internalType: 'bytes32', type: 'bytes32' },
      { name: 'history_hash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'bond', internalType: 'uint256', type: 'uint256' },
      { name: 'min_bond', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'template_id', internalType: 'uint256', type: 'uint256' },
      { name: 'question', internalType: 'string', type: 'string' },
      { name: 'arbitrator', internalType: 'address', type: 'address' },
      { name: 'timeout', internalType: 'uint32', type: 'uint32' },
      { name: 'opening_ts', internalType: 'uint32', type: 'uint32' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'min_bond', internalType: 'uint256', type: 'uint256' },
      { name: 'reopens_question_id', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'reopenQuestion',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'reopened_questions',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'reopener_questions',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'question_id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'resultFor',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'question_id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'resultForOnceSettled',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setQuestionFee',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'question_id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'answer', internalType: 'bytes32', type: 'bytes32' },
      { name: 'max_previous', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'submitAnswer',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'question_id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'answer', internalType: 'bytes32', type: 'bytes32' },
      { name: 'answerer', internalType: 'address', type: 'address' },
    ],
    name: 'submitAnswerByArbitrator',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'question_id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'answer_hash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'max_previous', internalType: 'uint256', type: 'uint256' },
      { name: '_answerer', internalType: 'address', type: 'address' },
    ],
    name: 'submitAnswerCommitment',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'question_id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'answer', internalType: 'bytes32', type: 'bytes32' },
      { name: 'max_previous', internalType: 'uint256', type: 'uint256' },
      { name: 'answerer', internalType: 'address', type: 'address' },
    ],
    name: 'submitAnswerFor',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'question_id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'answer', internalType: 'bytes32', type: 'bytes32' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'bond', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'submitAnswerReveal',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'template_hashes',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'templates',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'withdraw',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

/**
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x5b7dD1E86623548AF054A4985F7fc8Ccbb554E2c)
 */
export const realityEthV3_0Address = {
  1: '0x5b7dD1E86623548AF054A4985F7fc8Ccbb554E2c',
} as const

/**
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x5b7dD1E86623548AF054A4985F7fc8Ccbb554E2c)
 */
export const realityEthV3_0Config = {
  address: realityEthV3_0Address,
  abi: realityEthV3_0Abi,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RealityModuleETH
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x72d453a685c27580acDFcF495830EB16B7E165f8)
 */
export const realityModuleEthAbi = [
  {
    type: 'constructor',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_avatar', internalType: 'address', type: 'address' },
      { name: '_target', internalType: 'address', type: 'address' },
      { name: '_oracle', internalType: 'contract RealitioV3', type: 'address' },
      { name: 'timeout', internalType: 'uint32', type: 'uint32' },
      { name: 'cooldown', internalType: 'uint32', type: 'uint32' },
      { name: 'expiration', internalType: 'uint32', type: 'uint32' },
      { name: 'bond', internalType: 'uint256', type: 'uint256' },
      { name: 'templateId', internalType: 'uint256', type: 'uint256' },
      { name: 'arbitrator', internalType: 'address', type: 'address' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAvatar',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newAvatar',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AvatarSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'guard',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ChangedGuard',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'questionId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
    ],
    name: 'ProposalQuestionCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'initiator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'avatar',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'RealityModuleSetup',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousTarget',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newTarget',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'TargetSet',
  },
  {
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'INVALIDATED',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'TRANSACTION_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'string', type: 'string' },
      { name: 'txHashes', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'addProposal',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'string', type: 'string' },
      { name: 'txHashes', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addProposalWithNonce',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'answerExpiration',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'avatar',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'string', type: 'string' },
      { name: 'txHashes', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'buildQuestion',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'pure',
  },
  {
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'string', type: 'string' },
      { name: 'txHashes', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
    ],
    name: 'executeProposal',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'string', type: 'string' },
      { name: 'txHashes', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
      { name: 'txIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'executeProposalWithIndex',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'executedProposalTransactions',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'generateTransactionHashData',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getGuard',
    outputs: [{ name: '_guard', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'question', internalType: 'string', type: 'string' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getQuestionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getTransactionHash',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'guard',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'string', type: 'string' },
      { name: 'txHashes', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'markProposalAsInvalid',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'questionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'markProposalAsInvalidByHash',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'questionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'markProposalWithExpiredAnswerAsInvalid',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'minimumBond',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'oracle',
    outputs: [
      { name: '', internalType: 'contract RealitioV3', type: 'address' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'questionArbitrator',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'questionCooldown',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'questionIds',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'questionTimeout',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'expiration', internalType: 'uint32', type: 'uint32' }],
    name: 'setAnswerExpiration',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'arbitrator', internalType: 'address', type: 'address' }],
    name: 'setArbitrator',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_avatar', internalType: 'address', type: 'address' }],
    name: 'setAvatar',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_guard', internalType: 'address', type: 'address' }],
    name: 'setGuard',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'bond', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinimumBond',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'cooldown', internalType: 'uint32', type: 'uint32' }],
    name: 'setQuestionCooldown',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'timeout', internalType: 'uint32', type: 'uint32' }],
    name: 'setQuestionTimeout',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_target', internalType: 'address', type: 'address' }],
    name: 'setTarget',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'templateId', internalType: 'uint256', type: 'uint256' }],
    name: 'setTemplate',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'initParams', internalType: 'bytes', type: 'bytes' }],
    name: 'setUp',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'target',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'template',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

/**
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x72d453a685c27580acDFcF495830EB16B7E165f8)
 */
export const realityModuleEthAddress = {
  1: '0x72d453a685c27580acDFcF495830EB16B7E165f8',
} as const

/**
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x72d453a685c27580acDFcF495830EB16B7E165f8)
 */
export const realityModuleEthConfig = {
  address: realityModuleEthAddress,
  abi: realityModuleEthAbi,
} as const
